generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum CategoryType {
  HOUSING // Rent, Mortgage, Repairs
  TRANSPORTATION // Car payments, Gas, Public transit
  FOOD // Groceries, Dining out
  UTILITIES // Electricity, Water, Internet
  HEALTHCARE // Medical expenses, Insurance
  EDUCATION // Tuition, Books, Courses
  ENTERTAINMENT // Movies, Games, Hobbies
  SHOPPING // Clothing, Electronics
  PERSONAL_CARE // Haircuts, Gym
  INCOME_SALARY // Regular employment
  INCOME_BUSINESS // Business profits
  INCOME_INVESTMENT // Dividends, Interest
  OTHER
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id          String        @id @default(cuid())
  wallet      String
  firstName   String?
  lastName    String?
  image       String?
  accounts    Account[]
  transaction Transaction[]

  @@unique([wallet])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Transaction {
  id       String          @id @default(cuid())
  userId   String          @map("user_id")
  date     DateTime
  amount   Float
  type     TransactionType
  category CategoryType

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
